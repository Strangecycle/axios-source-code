'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  // 初始化 config
  this.defaults = instanceConfig;
  // 初始化拦截器
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {  // 这个 config 就是 axios(config) 中的参数
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    /*
      当 axios('http://json.com/json') 这样调用时，相当于：
        axios({
          url: 'http://json.com/json'
        })
    */
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  // 将 config 对象与 default config 合并
  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    // config 没有传递 method 时，默认就是 get
    config.method = 'get';
  }

  // Hook up interceptors middleware 
  // dispatchRequest 用于分发请求，内部调用了 adapter 请求方法，返回值就是我们在测试中写的 axios('url') 的结果
  var chain = [dispatchRequest, undefined];
  // 将 config 存在一个 Promise 对象中
  var promise = Promise.resolve(config);

  // 执行请求拦截器
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  // 执行响应拦截器
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    /*
      分发请求，然后返回结果到 promise 中，相当于：
        promise.then(config => dispatchRequest(config), config => dispatchRequest(config))
        (好骚的操作啊)
    */
    promise = promise.then(chain.shift(), chain.shift());
  }

  /*
    实际上，axios('url', config) 会转换成这样的调用：
      axios({
        url: '...',
        method: '...',
        // ...other config
      })

    返回 promise，一个 axios('url').then(...) 的操作就完成了
  */
  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;
