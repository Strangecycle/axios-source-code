'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  // 初始化 config
  this.defaults = instanceConfig;
  // 问题4：从初始化拦截器开始
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
// axios 所有请求的调用都走这里
Axios.prototype.request = function request(config) {  // 这个 config 就是 axios(config) 中的参数
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    /*
      当 axios('http://json.com/json') 这样调用时，实际会转成：
        axios({
          url: 'http://json.com/json'
        })
    */
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  // 将 config 对象与 default config 合并
  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    // config 没有传递 method 时，默认就是 get
    config.method = 'get';
  }

  // Hook up interceptors middleware 
  // dispatchRequest 用于分发请求，内部调用了 adapter 请求方法，返回值就是我们在测试中写的 axios('url') 的结果
  var chain = [dispatchRequest, undefined];
  // 将 config 存在一个 Promise 对象中
  var promise = Promise.resolve(config);

  // 执行请求拦截器
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    // 这里将请求拦截器加入到 chain 调用链的头部
    // 也就是把调用 use 的第一个和第二个函数加到 dispatchRequest 之前
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  // 执行响应拦截器
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    // 这里也就是将响应拦截器放在 dispatchRequest 之后处理请求结果
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });
  
  // 此时的调用链（伪）：chain = [reqeust.fulfilled，reqeust.rejected, dispatchRequest, undefined, response.fulfilled，response.rejected]

  // 调用链如何调用
  while (chain.length) {
    /* 
      1、首先我们得知道，调用链中的每个方法都会返回一个对象：config(请求前), error(请求失败), response(响应),
        这也就是为什么在拦截器中必须参数处理后必须 return
      2、promise.then 一次会执行两个方法，也就是 use 参数中的两个函数，正好对应了 then 中的两个参数，
        实际上也就是：promise.then(fulfilled, reject)，相当于 promise.then((config) => fulfilled(config), (error) => reject(error))
      3、这里使用的是 chain.shift()，它会将 chain 中的第一个方法删除并返回这个方法，然后拿着这个方法的返回结果进行下一轮调用，
        这样做既能实现调用链也能控制循环，因为每调用一次 chain.length 会减去 1
      4、在 chain 中的拦截、请求、异常捕获结束之后，会将最后一次的结果保存下来
    */
    promise = promise.then(chain.shift(), chain.shift());
  }

  // 返回最终的结果 promise，一个 axios 请求操作就完成了
  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// 问题2：使用循环将 ['delete', 'get', 'head', 'options'] 等请求方法挂载到 Axios 原型上
// 在 axios 实例上可以直接调用，也就是 axios.get/delete...
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    // 挂载后的方法实际执行的也是 Axios.prototype.request
    // 实际执行就如同 axios('url') 和 axios(config) 一致了
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

// 同上
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;
